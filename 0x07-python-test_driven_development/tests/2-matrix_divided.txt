The ``2-matrix_divided`` Module
*******************************

Using ``matrix_divided``
------------------------

	>>> matrix_divided = __import__('2-matrix_divided').matrix_divided

Testing valid args::

	>>> mtx = [[1, 2, 3],
	...		   [4, 5, 6]]
	>>> matrix_divided(mtx, 3)		# doctest: +NORMALIZE_WHITESPACE
	[[0.33, 0.67, 1.0],
	 [1.33, 1.67, 2.0]]

	it should not modify the original matrix
	>>> mtx							# doctest: +NORMALIZE_WHITESPACE
	[[1, 2, 3],
	 [4, 5, 6]]

	>>> div_mtx = matrix_divided(mtx, 1)
	>>> div_mtx						# doctest: +NORMALIZE_WHITESPACE
	[[1.0, 2.0, 3.0],
	 [4.0, 5.0, 6.0]]

	the content is equal
	>>> div_mtx == mtx
	True

	but they are not the same object (list)
	>>> div_mtx is mtx
	False

	>>> matrix_divided([[2.5, 5], [3, 1.5]], 0.5)
	[[5.0, 10.0], [6.0, 3.0]]

Testing Raises::

	>>> matrix_divided([[7], [4]], 0)
	Traceback (most recent call last):
		~~~
	ZeroDivisionError: division by zero

	>>> matrix_divided([[2.5, 5], [3, 1.5]], "two")
	Traceback (most recent call last):
		~~~
	TypeError: div must be a number

	>>> matrix_divided([[2.5, 5], [3, 1.5], [315]], 2)
	Traceback (most recent call last):
		~~~
	TypeError: Each row of the matrix must have the same size

	>>> matrix_divided([[2.5, 5], (3, 1.5)], 2)
	Traceback (most recent call last):
		~~~
	TypeError: matrix must be a matrix (list of lists) of integers/floats

	>>> matrix_divided([[2.5, 5], ["3", 1.5]], 2)
	Traceback (most recent call last):
		~~~
	TypeError: matrix must be a matrix (list of lists) of integers/floats

Testing Edge Cases::

	>>> matrix_divided([], 3)
	[]

	>>> matrix_divided([[]], 3)
	[[]]

	>>> matrix_divided([[0]], 3)
	[[0.0]]

	>>> matrix_divided([[3]], 1)
	[[3.0]]

	>>> matrix_divided([[6, 12], [15, 3]], 3)
	[[2.0, 4.0], [5.0, 1.0]]

	>>> matrix_divided([[6, 12], [15, 3]], 0.1)
	[[60.0, 120.0], [150.0, 30.0]]
